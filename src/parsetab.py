
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOL BREAK COMMA COMMENT CONSTANT DELIMITER DIFF DIVIDE ELSE EQUALS FALSE FLOAT FOR GT GTE IDENTIFIER IF INT LBRACE LPAREN LT LTE MINUS MOD NAME OPERATOR OR PLUS RBRACE READ RETURN RPAREN SEMICOLON STRING TIMES TRUE WHILE WRITEprogram : statement_liststatement_list : statement\n                      | statement_list statementstatement : var_declaration\n                 | if_statement\n                 | while_statement\n                 | function_definition\n                 | function_call\n                 | assignmentvar_declaration : type NAME SEMICOLONtype : INT\n            | BOOL\n            | STRINGif_statement : IF LPAREN expression RPAREN LBRACE statement_list RBRACEwhile_statement : WHILE LPAREN expression RPAREN LBRACE statement_list RBRACEfunction_definition : type NAME LPAREN param_list RPAREN LBRACE statement_list RBRACEparam_list : param\n                  | param_list COMMA param\n                  | emptyparam : type NAMEfunction_call : NAME LPAREN arg_list RPAREN SEMICOLONarg_list : expression\n                | arg_list COMMA expression\n                | emptyassignment : NAME ASSIGN expression SEMICOLONexpression : NAME\n                  | CONSTANT\n                  | FLOAT\n                  | expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expression\n                  | expression AND expression\n                  | expression OR expression\n                  | LPAREN expression RPARENempty :'
    
_lr_action_items = {'IF':([0,2,3,4,5,6,7,8,9,17,23,49,56,65,66,67,69,70,71,72,73,74,],[12,12,-2,-4,-5,-6,-7,-8,-9,-3,-10,-25,-21,12,12,12,12,12,12,-14,-15,-16,]),'WHILE':([0,2,3,4,5,6,7,8,9,17,23,49,56,65,66,67,69,70,71,72,73,74,],[13,13,-2,-4,-5,-6,-7,-8,-9,-3,-10,-25,-21,13,13,13,13,13,13,-14,-15,-16,]),'NAME':([0,2,3,4,5,6,7,8,9,10,14,15,16,17,19,20,21,22,23,26,35,41,42,43,44,45,46,47,48,49,56,65,66,67,69,70,71,72,73,74,],[11,11,-2,-4,-5,-6,-7,-8,-9,18,-11,-12,-13,-3,25,25,25,25,-10,25,52,25,25,25,25,25,25,25,25,-25,-21,11,11,11,11,11,11,-14,-15,-16,]),'INT':([0,2,3,4,5,6,7,8,9,17,23,24,49,54,56,65,66,67,69,70,71,72,73,74,],[14,14,-2,-4,-5,-6,-7,-8,-9,-3,-10,14,-25,14,-21,14,14,14,14,14,14,-14,-15,-16,]),'BOOL':([0,2,3,4,5,6,7,8,9,17,23,24,49,54,56,65,66,67,69,70,71,72,73,74,],[15,15,-2,-4,-5,-6,-7,-8,-9,-3,-10,15,-25,15,-21,15,15,15,15,15,15,-14,-15,-16,]),'STRING':([0,2,3,4,5,6,7,8,9,17,23,24,49,54,56,65,66,67,69,70,71,72,73,74,],[16,16,-2,-4,-5,-6,-7,-8,-9,-3,-10,16,-25,16,-21,16,16,16,16,16,16,-14,-15,-16,]),'$end':([1,2,3,4,5,6,7,8,9,17,23,49,56,72,73,74,],[0,-1,-2,-4,-5,-6,-7,-8,-9,-3,-10,-25,-21,-14,-15,-16,]),'RBRACE':([3,4,5,6,7,8,9,17,23,49,56,69,70,71,72,73,74,],[-2,-4,-5,-6,-7,-8,-9,-3,-10,-25,-21,72,73,74,-14,-15,-16,]),'LPAREN':([11,12,13,18,19,20,21,22,26,41,42,43,44,45,46,47,48,],[19,21,22,24,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'ASSIGN':([11,],[20,]),'SEMICOLON':([18,25,30,31,32,40,55,58,59,60,61,62,63,64,],[23,-26,-27,-28,49,56,-36,-29,-30,-31,-32,-33,-34,-35,]),'CONSTANT':([19,20,21,22,26,41,42,43,44,45,46,47,48,],[30,30,30,30,30,30,30,30,30,30,30,30,30,]),'FLOAT':([19,20,21,22,26,41,42,43,44,45,46,47,48,],[31,31,31,31,31,31,31,31,31,31,31,31,31,]),'RPAREN':([19,24,25,27,28,29,30,31,33,34,36,37,38,39,52,55,57,58,59,60,61,62,63,64,68,],[-37,-37,-26,40,-22,-24,-27,-28,50,51,53,-17,-19,55,-20,-36,-23,-29,-30,-31,-32,-33,-34,-35,-18,]),'COMMA':([19,24,25,27,28,29,30,31,36,37,38,52,55,57,58,59,60,61,62,63,64,68,],[-37,-37,-26,41,-22,-24,-27,-28,54,-17,-19,-20,-36,-23,-29,-30,-31,-32,-33,-34,-35,-18,]),'PLUS':([25,28,30,31,32,33,34,39,55,57,58,59,60,61,62,63,64,],[-26,42,-27,-28,42,42,42,42,-36,42,42,42,42,42,42,42,42,]),'MINUS':([25,28,30,31,32,33,34,39,55,57,58,59,60,61,62,63,64,],[-26,43,-27,-28,43,43,43,43,-36,43,43,43,43,43,43,43,43,]),'TIMES':([25,28,30,31,32,33,34,39,55,57,58,59,60,61,62,63,64,],[-26,44,-27,-28,44,44,44,44,-36,44,44,44,44,44,44,44,44,]),'DIVIDE':([25,28,30,31,32,33,34,39,55,57,58,59,60,61,62,63,64,],[-26,45,-27,-28,45,45,45,45,-36,45,45,45,45,45,45,45,45,]),'MOD':([25,28,30,31,32,33,34,39,55,57,58,59,60,61,62,63,64,],[-26,46,-27,-28,46,46,46,46,-36,46,46,46,46,46,46,46,46,]),'AND':([25,28,30,31,32,33,34,39,55,57,58,59,60,61,62,63,64,],[-26,47,-27,-28,47,47,47,47,-36,47,47,47,47,47,47,47,47,]),'OR':([25,28,30,31,32,33,34,39,55,57,58,59,60,61,62,63,64,],[-26,48,-27,-28,48,48,48,48,-36,48,48,48,48,48,48,48,48,]),'LBRACE':([50,51,53,],[65,66,67,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,65,66,67,],[2,69,70,71,]),'statement':([0,2,65,66,67,69,70,71,],[3,17,3,3,3,17,17,17,]),'var_declaration':([0,2,65,66,67,69,70,71,],[4,4,4,4,4,4,4,4,]),'if_statement':([0,2,65,66,67,69,70,71,],[5,5,5,5,5,5,5,5,]),'while_statement':([0,2,65,66,67,69,70,71,],[6,6,6,6,6,6,6,6,]),'function_definition':([0,2,65,66,67,69,70,71,],[7,7,7,7,7,7,7,7,]),'function_call':([0,2,65,66,67,69,70,71,],[8,8,8,8,8,8,8,8,]),'assignment':([0,2,65,66,67,69,70,71,],[9,9,9,9,9,9,9,9,]),'type':([0,2,24,54,65,66,67,69,70,71,],[10,10,35,35,10,10,10,10,10,10,]),'arg_list':([19,],[27,]),'expression':([19,20,21,22,26,41,42,43,44,45,46,47,48,],[28,32,33,34,39,57,58,59,60,61,62,63,64,]),'empty':([19,24,],[29,38,]),'param_list':([24,],[36,]),'param':([24,54,],[37,68,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser_rules.py',6),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser_rules.py',10),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser_rules.py',11),
  ('statement -> var_declaration','statement',1,'p_statement','parser_rules.py',18),
  ('statement -> if_statement','statement',1,'p_statement','parser_rules.py',19),
  ('statement -> while_statement','statement',1,'p_statement','parser_rules.py',20),
  ('statement -> function_definition','statement',1,'p_statement','parser_rules.py',21),
  ('statement -> function_call','statement',1,'p_statement','parser_rules.py',22),
  ('statement -> assignment','statement',1,'p_statement','parser_rules.py',23),
  ('var_declaration -> type NAME SEMICOLON','var_declaration',3,'p_var_declaration','parser_rules.py',27),
  ('type -> INT','type',1,'p_type','parser_rules.py',31),
  ('type -> BOOL','type',1,'p_type','parser_rules.py',32),
  ('type -> STRING','type',1,'p_type','parser_rules.py',33),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE','if_statement',7,'p_if_statement','parser_rules.py',37),
  ('while_statement -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE','while_statement',7,'p_while_statement','parser_rules.py',41),
  ('function_definition -> type NAME LPAREN param_list RPAREN LBRACE statement_list RBRACE','function_definition',8,'p_function_definition','parser_rules.py',45),
  ('param_list -> param','param_list',1,'p_param_list','parser_rules.py',49),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','parser_rules.py',50),
  ('param_list -> empty','param_list',1,'p_param_list','parser_rules.py',51),
  ('param -> type NAME','param',2,'p_param','parser_rules.py',58),
  ('function_call -> NAME LPAREN arg_list RPAREN SEMICOLON','function_call',5,'p_function_call','parser_rules.py',62),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser_rules.py',66),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','parser_rules.py',67),
  ('arg_list -> empty','arg_list',1,'p_arg_list','parser_rules.py',68),
  ('assignment -> NAME ASSIGN expression SEMICOLON','assignment',4,'p_assignment','parser_rules.py',75),
  ('expression -> NAME','expression',1,'p_expression','parser_rules.py',79),
  ('expression -> CONSTANT','expression',1,'p_expression','parser_rules.py',80),
  ('expression -> FLOAT','expression',1,'p_expression','parser_rules.py',81),
  ('expression -> expression PLUS expression','expression',3,'p_expression','parser_rules.py',82),
  ('expression -> expression MINUS expression','expression',3,'p_expression','parser_rules.py',83),
  ('expression -> expression TIMES expression','expression',3,'p_expression','parser_rules.py',84),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','parser_rules.py',85),
  ('expression -> expression MOD expression','expression',3,'p_expression','parser_rules.py',86),
  ('expression -> expression AND expression','expression',3,'p_expression','parser_rules.py',87),
  ('expression -> expression OR expression','expression',3,'p_expression','parser_rules.py',88),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','parser_rules.py',89),
  ('empty -> <empty>','empty',0,'p_empty','parser_rules.py',99),
]
